kind: Template
apiVersion: v1
metadata:
    name: ${PROJECT_NAME}
    annotations:
        description: 'An example ECHO (https://echo.labstack.com//) application written in Golang'
        tags: 'quickstart,golang'
        iconClass: icon-go-gopher
labels:
    template: ${PROJECT_NAME}
    app: ${PROJECT_NAME}
objects:
    - 
        kind: Service
        apiVersion: v1
        metadata:
            name: ${PROJECT_NAME}
            annotations:
                description: Exposes and load balances the application pods
        spec:
            ports:
                - 
                    name: web
                    port: 1323
                    targetPort: 1323
            selector:
                name: ${PROJECT_NAME}
    - 
        kind: Route
        apiVersion: v1
        metadata:
            name: ${PROJECT_NAME}
        spec:
            host: '${APPLICATION_DOMAIN}'
            to:
                kind: Service
                name: ${PROJECT_NAME}
    - 
        kind: ImageStream
        apiVersion: v1
        metadata:
            name: ${PROJECT_NAME}
            annotations:
                description: Keeps track of changes in the application image
    - 
        kind: BuildConfig
        apiVersion: v1
        metadata:
            name: ${PROJECT_NAME}
            annotations:
                description: Defines how to build the application
        spec:
            source:
                type: Git
                git:
                    uri: '${SOURCE_REPOSITORY_URL}'
                    ref: '${SOURCE_REPOSITORY_REF}'
                contextDir: '${CONTEXT_DIR}'
            strategy:
                type: Docker
            output:
                to:
                    kind: ImageStreamTag
                    name: '${PROJECT_NAME}:latest'
            triggers:
                - 
                    type: ConfigChange
                - 
                    type: GitHub
                    github:
                        secret: '${GITHUB_WEBHOOK_SECRET}'
    -
        kind: BuildConfig
        apiVersion: v1
        metadata:
            name: "${PROJECT_NAME}-jenkins"
            annotations:
            description: Trigger a Jenkins build when push to the repository
        spec:
            source:
            type: Git
            git:
                uri: "${SOURCE_REPOSITORY_URL}"
                ref: "${SOURCE_REPOSITORY_REF}"
            contextDir: "${CONTEXT_DIR}"
            strategy: 
                jenkinsPipelineStrategy:
                    jenkinsfile: |-
                        def final String ID  = UUID.randomUUID().toString()
                        def final String POD = "golang-${ID}"
                            // Podtemplate for a software stack, in this case only jnlp and golang container from dockerhub 
                            podTemplate(
                                label: POD, name: "test-golang-${ID}",
                                cloud: 'openshift',
                                serviceAccount: 'jenkins',
                                containers: [
                                    // Connectivity to jenkins
                                    containerTemplate(name: 'jnlp',
                                        workingDir: '/tmp',
                                        image: 'jenkins/jnlp-slave:3.19-1',
                                        args: '${computer.jnlpmac} ${computer.name}'
                                    ),
                                    //golang for building the application
                                    containerTemplate(name: 'golang',
                                        workingDir: '/tmp',
                                        command: 'tail -f /dev/null',
                                        image: 'golang:1.12.1-alpine3.9'
                                    )
                                ]
                            )
                        {

                            node(POD) {
                                    git poll: true, url: '${SOURCE_REPOSITORY_URL}'
                                    container('golang'){
                                        stage('build') {
                                            openshiftBuild(buildConfig: '${PROJECT_NAME}', showBuildLogs: 'true')
                                        }
                                        stage('deploy') {
                                            openshiftDeploy(deploymentConfig: '${PROJECT_NAME}')
                                        }
                                    }
                            }
                        }
                type: JenkinsPipeline          
            triggers:
            - github:
                secret: "${GITHUB_WEBHOOK_SECRET}"
              type: GitHub

    - 
        kind: DeploymentConfig
        apiVersion: v1
        metadata:
            name: ${PROJECT_NAME}
            annotations:
                description: Defines how to deploy the application server
        spec:
            strategy:
                type: Recreate
            triggers:
                - 
                    type: ImageChange
                    imageChangeParams:
                        automatic: true
                        containerNames:
                            - ${PROJECT_NAME}
                        from:
                            kind: ImageStreamTag
                            name: '${PROJECT_NAME}:latest'
                - 
                    type: ConfigChange
                    type: Github
                    github:
                        secret: "${GITHUB_WEBHOOK_SECRET}"
            replicas: 1
            selector:
                name: ${PROJECT_NAME}
            template:
                metadata:
                    name: ${PROJECT_NAME}
                    labels:
                        name: ${PROJECT_NAME}
                spec:
                    containers:
                        - 
                            name: ${PROJECT_NAME}
                            image: ${PROJECT_NAME}
                            ports:
                                - 
                                    containerPort: 8080
parameters:
    - 
        name: SOURCE_REPOSITORY_URL
        description: The URL of the repository with your application source code
        value: 'https://github.com/oviis/webserver-go-templates.git'
    - 
        name: SOURCE_REPOSITORY_REF
        description: 'Set this to a branch name, tag or other ref of your repository if you are not using the default branch'
    - 
        name: CONTEXT_DIR
        description: Set this to the relative path to your project if it is not in the root of your repository
    - 
        name: APPLICATION_DOMAIN
        description: The exposed hostname that will route to the webserver service
        value: echo-example.192.168.99.100.nip.io
    - 
        name: GITHUB_WEBHOOK_SECRET
        description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
        generate: expression
        from: '[a-zA-Z0-9]{40}'
    -
        name: PROJECT_NAME
        description: will be the Project name
        value: echo-example
